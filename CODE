import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class TicTacToe {
    public static void main(String[] args) {
        Settings.loadSettings();
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("\nМеню:");
            System.out.println("1. Нова гра");
            System.out.println("2. Налаштування");
            System.out.println("3. Показати статистику");
            System.out.println("4. Вихід");
            System.out.print("Ваш вибір: ");
            String choice = sc.nextLine();

            if (choice.equals("1")) {
                Game.playGame();
            } else if (choice.equals("2")) {
                Settings.configureSettings();
            } else if (choice.equals("3")) {
                Statistics.showStatistics();
            } else if (choice.equals("4")) {
                break;
            } else {
                System.out.println("Невірний вибір.");
            }
        }
    }
}

class Settings {
    public static int boardSize = 3;
    public static String player1 = "Player1";
    public static String player2 = "Player2";

    public static void loadSettings() {
        try {
            File file = new File("settings.txt");
            if (!file.exists()) return;

            Scanner sc = new Scanner(file);
            boardSize = Integer.parseInt(sc.nextLine());
            player1 = sc.nextLine();
            player2 = sc.nextLine();
            sc.close();
        } catch (Exception e) {
            System.out.println("Помилка читання налаштувань.");
        }
    }

    public static void saveSettings() {
        try {
            FileWriter writer = new FileWriter("settings.txt");
            writer.write(boardSize + "\n");
            writer.write(player1 + "\n");
            writer.write(player2 + "\n");
            writer.close();
        } catch (IOException e) {
            System.out.println("Помилка збереження налаштувань.");
        }
    }

    public static void configureSettings() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Введіть розмір поля (3-9): ");
        boardSize = Integer.parseInt(sc.nextLine());
        System.out.print("Ім'я першого гравця: ");
        player1 = sc.nextLine();
        System.out.print("Ім'я другого гравця: ");
        player2 = sc.nextLine();
        saveSettings();
    }
}

class Statistics {
    public static void saveGameResult(String winner, int size) {
        try {
            FileWriter writer = new FileWriter("stats.txt", true);
            String time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
            writer.write(time + "\n");
            writer.write(Settings.player1 + " (X) vs " + Settings.player2 + " (O)\n");
            writer.write("Переможець: " + winner + "\n");
            writer.write("Розмір поля: " + size + "\n");
            writer.write("---\n");
            writer.close();
        } catch (IOException e) {
            System.out.println("Помилка збереження статистики.");
        }
    }

    public static void showStatistics() {
        try {
            File file = new File("stats.txt");
            if (!file.exists()) {
                System.out.println("Немає збереженої статистики.");
                return;
            }

            Scanner sc = new Scanner(file);
            while (sc.hasNextLine()) {
                System.out.println(sc.nextLine());
            }
            sc.close();
        } catch (IOException e) {
            System.out.println("Помилка читання статистики.");
        }
    }
}

class Game {
    public static void playGame() {
        int size = Settings.boardSize;
        char[][] board = new char[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                board[i][j] = ' ';
            }
        }

        Scanner sc = new Scanner(System.in);
        char currentPlayer = 'X';
        String currentName = Settings.player1;
        int totalMoves = 0;
        boolean gameOver = false;

        while (!gameOver && totalMoves < size * size) {
            printBoard(board);
            System.out.println(currentName + " (" + currentPlayer + ") - введіть рядок і стовпець (від 1):");
            int row = sc.nextInt() - 1;
            int col = sc.nextInt() - 1;

            if (row < 0 || row >= size || col < 0 || col >= size || board[row][col] != ' ') {
                System.out.println("Невірний хід. Спробуйте ще раз.");
                continue;
            }

            board[row][col] = currentPlayer;
            totalMoves++;

            if (checkWin(board, currentPlayer)) {
                printBoard(board);
                System.out.println("Переміг: " + currentName);
                Statistics.saveGameResult(currentName, size);
                gameOver = true;
            } else {
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
                currentName = (currentPlayer == 'X') ? Settings.player1 : Settings.player2;
            }
        }

        if (!gameOver) {
            printBoard(board);
            System.out.println("Нічия!");
            Statistics.saveGameResult("Нічия", size);
        }
    }

    private static void printBoard(char[][] board) {
        int size = board.length;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.print(" " + board[i][j] + " ");
                if (j < size - 1) System.out.print("|");
            }
            System.out.println();
            if (i < size - 1) {
                for (int j = 0; j < size; j++) {
                    System.out.print("---");
                    if (j < size - 1) System.out.print("+");
                }
                System.out.println();
            }
        }
    }

    private static boolean checkWin(char[][] board, char symbol) {
        int size = board.length;

        for (int i = 0; i < size; i++) {
            boolean rowWin = true;
            boolean colWin = true;
            for (int j = 0; j < size; j++) {
                if (board[i][j] != symbol) rowWin = false;
                if (board[j][i] != symbol) colWin = false;
            }
            if (rowWin || colWin) return true;
        }

        boolean mainDiag = true, antiDiag = true;
        for (int i = 0; i < size; i++) {
            if (board[i][i] != symbol) mainDiag = false;
            if (board[i][size - i - 1] != symbol) antiDiag = false;
        }
        return mainDiag || antiDiag;
    }
}
